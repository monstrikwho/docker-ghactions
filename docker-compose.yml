version: "3.8"
services:
  redis:
    container_name: redis
    image: redis/redis-stack:latest
    restart: unless-stopped
    ports:
      - 6379:6379
      - 8001:8001
    volumes:
      - redis_volume_data:/data
      - redis_insight_volume_data:/db
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # redis:
  #   container_name: redis
  #   image: redis:6.0.7
  #   restart: unless-stopped
  #   ports:
  #     - 6379:6379
  #   volumes:
  #     - redis_volume_data:/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s

  # redis_insight:
  #   image: redis/redisinsight:latest
  #   container_name: redis_insight
  #   restart: unless-stopped
  #   ports:
  #     - 5540:5540
  #   volumes:
  #     - redis_insight_volume_data:/db

  postgres:
    container_name: postgres
    image: postgres:14.1-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DEV_DATABASE}
      - POSTGRES_USER=${DEV_USER}
      - POSTGRES_PASSWORD=${DEV_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_volume_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DEV_USER} -d ${DEV_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    env_file:
      - .env
    networks:
      - postgres

  pgadmin:
    container_name: postgres_pgadmin
    image: dpage/pgadmin4:7.2
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: "habrpguser@habr.com"
      PGADMIN_DEFAULT_PASSWORD: "pgadminpwd4habr"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_volume_data:/var/lib/pgadmin
    networks:
      - postgres

  server:
    container_name: server
    ports:
      - $PORT:$PORT
    build: .
    depends_on:
      - postgres
    # command: npm run dev
    volumes:
      - .:/app/
      - /app/node_modules
    env_file:
      - ./.env
    stdin_open: true
    tty: true

volumes:
  redis_volume_data:
  redis_insight_volume_data:
  postgres_volume_data:
  pgadmin_volume_data:
  redis:
    driver: local
  postgres:
    driver: local

networks:
  postgres:
    driver: bridge
